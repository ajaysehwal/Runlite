events {
    worker_connections 1024;
}

http {
    # Basic settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # MIME types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Upstream block for the compiler service using Docker service name
    upstream compiler {
        least_conn;  # Load balancing method
        server compiler:8000;  # Docker will automatically resolve to all replicas
    }

    # Upstream block for the keys-server service using Docker service name
    upstream keys {
        least_conn;  # Load balancing method
        server keys-server:8080;  # Docker will automatically resolve to all replicas
    }

    # Server block to handle incoming requests
    server {
        listen 80;
        server_name localhost;

        # Buffer settings
        proxy_buffer_size 128k;
        proxy_buffers 4 256k;
        proxy_busy_buffers_size 256k;

        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;

        location /compiler/ {
            proxy_pass http://compiler/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }

        location /keys/ {
            proxy_pass http://keys/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
        }

        location /health {
            access_log off;
            return 200 'healthy\n';
        }
    }
}